# Generated by Django 5.0.6 on 2024-06-02 00:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Filiere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Nom_filiere', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('ADMIN', 'ADMIN'), ('PROF', 'PROF'), ('ETUDIANT', 'ETUDIANT')], max_length=20)),
                ('Sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], max_length=10)),
                ('adresse', models.TextField(max_length=150, null=True)),
                ('tel', models.CharField(max_length=40, null=True)),
                ('Napog', models.IntegerField(default=0, null=True)),
                ('CNE', models.CharField(max_length=50, null=True)),
                ('dateN', models.DateField(null=True)),
                ('lieuxN', models.CharField(max_length=50, null=True)),
                ('SPC', models.CharField(max_length=50, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Prof',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('manager.user',),
            managers=[
                ('prof', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('manager.user',),
            managers=[
                ('student', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Domaine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('NomDomaine', models.CharField(max_length=100)),
                ('filiere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manager.filiere')),
            ],
        ),
        migrations.CreateModel(
            name='Dossiers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Type', models.CharField(choices=[('1', "Stage d'initiation"), ('2', 'stage technique'), ('3', 'stage PFE'), ('4', 'Stage Professionel')], max_length=50)),
                ('Rapport', models.CharField(max_length=100)),
                ('Doss', models.CharField(max_length=100)),
                ('Sujet', models.CharField(max_length=100)),
                ('Encadrant', models.CharField(max_length=100)),
                ('Domaine', models.CharField(max_length=100)),
                ('Nom_filiere', models.CharField(max_length=100)),
                ('Year', models.DateField()),
                ('Niveau', models.CharField(choices=[('1ere Annee', '1ere Annee'), ('2eme Annee', '2eme Annee'), ('Licence Professionelle', 'Licence Professionelle')], max_length=50)),
                ('ValidationProf', models.BooleanField(default=False)),
                ('ValidationAdmin', models.BooleanField(default=False)),
                ('RemarqueProf', models.CharField(blank=True, max_length=255, null=True)),
                ('RemarqueAdmin', models.CharField(blank=True, max_length=255, null=True)),
                ('Student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manager.student')),
            ],
            options={
                'ordering': ['Type'],
            },
        ),
        migrations.CreateModel(
            name='Prof_Filiere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Niveau', models.CharField(choices=[('1ere Annee', '1ere Annee'), ('2eme Annee', '2eme Annee'), ('Licence Professionelle', 'Licence Professionelle')], max_length=50)),
                ('Annee', models.DateField()),
                ('filiere', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='manager.filiere')),
                ('prof', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='manager.prof')),
            ],
            options={
                'ordering': ['Annee', 'prof', 'Niveau'],
                'unique_together': {('Niveau', 'filiere', 'prof', 'Annee')},
            },
        ),
        migrations.CreateModel(
            name='StudenttFiliere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Niveau', models.CharField(choices=[('1ere Annee', '1ere Annee'), ('2eme Annee', '2eme Annee'), ('Licence Professionelle', 'Licence Professionelle')], max_length=50)),
                ('Year', models.DateField()),
                ('Filiere', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='manager.filiere')),
                ('Etudiant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='manager.student')),
            ],
            options={
                'ordering': ['Year'],
                'unique_together': {('Year', 'Etudiant')},
            },
        ),
    ]
